import "./JoinSplit.zok" as JoinSplit;

const u32 TREE_HEIGHT = 20;
const u32 NUM_INPUTS = 1;
const u32 NUM_OUTPUTS = 0;

def main(\
  field root, \
  field[NUM_INPUTS] serialNumbers, \
  field[NUM_INPUTS] sigHashes, \
  field sigPublicKey, \
  field publicAmount, \
  field relayerFeeAmount, \
  field[NUM_OUTPUTS] outCommitments, \
  field[NUM_OUTPUTS] rollupFeeAmounts, \
  private field[NUM_INPUTS] inCommitments, \
  private field[NUM_INPUTS] inAmount, \
  private field[NUM_INPUTS] inRandomP, \
  private field[NUM_INPUTS] inRandomR, \
  private field[NUM_INPUTS] inRandomS, \
  private field[NUM_INPUTS] inSecretKey, \
  private field[NUM_INPUTS] inPublicKey, \
  private field[NUM_INPUTS][TREE_HEIGHT] inPathElements, \
  private bool[NUM_INPUTS][TREE_HEIGHT] inPathIndices, \
  private field[NUM_OUTPUTS] outAmount, \
  private field[NUM_OUTPUTS] outRandomP, \
  private field[NUM_OUTPUTS] outRandomR, \
  private field[NUM_OUTPUTS] outRandomS, \
  private field[NUM_OUTPUTS] outPublicKey) {
  assert(JoinSplit::<TREE_HEIGHT, NUM_INPUTS, NUM_OUTPUTS>(\
    root, \
    serialNumbers, \
    sigHashes, \
    sigPublicKey, \
    publicAmount, \
    relayerFeeAmount, \
    outCommitments, \
    rollupFeeAmounts, \
    inCommitments, \
    inAmount, \
    inRandomP, \
    inRandomR, \
    inRandomS, \
    inSecretKey, \
    inPublicKey, \
    inPathElements, \
    inPathIndices, \
    outAmount, \
    outRandomP, \
    outRandomR, \
    outRandomS, \
    outPublicKey));
  return;
}
